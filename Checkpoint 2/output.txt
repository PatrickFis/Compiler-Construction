COMMENT: #===============================================================
COMMENT: # File--------calendar.slic
COMMENT: # Programmer--Bryan Crawley
COMMENT: # Project-----Slic demo
COMMENT: #
COMMENT: # This program displays a calendar for a chosen month. The
COMMENT: # user specifies the month and year as integers. The program
COMMENT: # responds with a calendar for that month.
COMMENT: #
COMMENT: # Note: This program only works for the Gregorian calendar.
COMMENT: #===============================================================
RWMAIN: main
SEMICOLON: ;
RWDATA: data
COLON: :
RWINT: integer
COLON: :
VAR: year
SEMICOLON: ;
COMMENT: # The 4-digit year adjusted for Zeller's congruence.
RWINT: integer
COLON: :
VAR: displayYear
SEMICOLON: ;
COMMENT: # The 4-digit year as entered by the user.
RWINT: integer
COLON: :
VAR: month
SEMICOLON: ;
COMMENT: # The month (1-12).
RWINT: integer
COLON: :
VAR: day
SEMICOLON: ;
COMMENT: # Day of the month. Always 1 for this program.
RWINT: integer
COLON: :
VAR: m
COMMA: ,
VAR: y
COMMA: ,
VAR: c
SEMICOLON: ;
COMMENT: # Variables for Zeller's Congruence.
RWINT: integer
COLON: :
VAR: temp
SEMICOLON: ;
COMMENT: # An intermediate result in Zeller's Congruence.
RWINT: integer
COLON: :
VAR: weekday
SEMICOLON: ;
COMMENT: # Day of the week for first day of month (0-6).
RWINT: integer
COLON: :
VAR: count
COMMA: ,
VAR: i
SEMICOLON: ;
COMMENT: # Counters used in displaying the calendar.
RWINT: integer
COLON: :
VAR: monthSize
LBRACK: [
LITINT: 13
RBRACK: ]
SEMICOLON: ;
COMMENT: # A table for number of days in each month.
RWALG: algorithm
COLON: :
COMMENT: # Create a table for the number of days in each month.
VAR: monthSize
LBRACK: [
LITINT: 1
RBRACK: ]
ASSIGN: :=
LITINT: 31
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 2
RBRACK: ]
ASSIGN: :=
LITINT: 28
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 3
RBRACK: ]
ASSIGN: :=
LITINT: 31
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 4
RBRACK: ]
ASSIGN: :=
LITINT: 30
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 5
RBRACK: ]
ASSIGN: :=
LITINT: 31
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 6
RBRACK: ]
ASSIGN: :=
LITINT: 30
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 7
RBRACK: ]
ASSIGN: :=
LITINT: 31
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 8
RBRACK: ]
ASSIGN: :=
LITINT: 31
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 9
RBRACK: ]
ASSIGN: :=
LITINT: 30
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 10
RBRACK: ]
ASSIGN: :=
LITINT: 31
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 11
RBRACK: ]
ASSIGN: :=
LITINT: 30
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 12
RBRACK: ]
ASSIGN: :=
LITINT: 31
SEMICOLON: ;
COMMENT: # Fetch the user's input.
RWPRINT: print
CARRETURN: !
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "Month----"
SEMICOLON: ;
RWREAD: read
VAR: month
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "Year-----"
SEMICOLON: ;
RWREAD: read
VAR: year
SEMICOLON: ;
RWPRINT: print
CARRETURN: !
SEMICOLON: ;
VAR: day
ASSIGN: :=
LITINT: 1
SEMICOLON: ;
VAR: displayYear
ASSIGN: :=
VAR: year
SEMICOLON: ;
COMMENT: # Adjust the number of days in February for leap year.
RWIF: if
LPAREN: (
LPAREN: (
VAR: year
MINUS: -
VAR: year
DIV: /
LITINT: 4
MULT: *
LITINT: 4
RPAREN: )
EQUAL: =
LITINT: 0
AND: &
LPAREN: (
VAR: year
MINUS: -
VAR: year
DIV: /
LITINT: 100
MULT: *
LITINT: 100
RPAREN: )
NOTEQUAL: <>
LITINT: 0
RPAREN: )
OR: |
LPAREN: (
LPAREN: (
VAR: year
MINUS: -
VAR: year
DIV: /
LITINT: 400
MULT: *
LITINT: 400
RPAREN: )
EQUAL: =
LITINT: 0
RPAREN: )
SEMICOLON: ;
VAR: monthSize
LBRACK: [
LITINT: 2
RBRACK: ]
ASSIGN: :=
LITINT: 29
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
COMMENT: # Set variables for Zeller's Congruence.
RWIF: if
LPAREN: (
VAR: month
LESSEQU: <=
LITINT: 2
RPAREN: )
SEMICOLON: ;
VAR: year
ASSIGN: :=
VAR: year
MINUS: -
LITINT: 1
SEMICOLON: ;
VAR: m
ASSIGN: :=
VAR: month
ADD: +
LITINT: 12
SEMICOLON: ;
RWELSE: else
SEMICOLON: ;
VAR: m
ASSIGN: :=
VAR: month
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
VAR: c
ASSIGN: :=
VAR: year
DIV: /
LITINT: 100
SEMICOLON: ;
VAR: y
ASSIGN: :=
VAR: year
MINUS: -
LPAREN: (
VAR: c
MULT: *
LITINT: 100
RPAREN: )
SEMICOLON: ;
COMMENT: # The basic formula for Zeller's Congruence...
VAR: temp
ASSIGN: :=
VAR: day
ADD: +
LPAREN: (
VAR: m
LITINT: +1
RPAREN: )
MULT: *
LITINT: 26
DIV: /
LITINT: 10
ADD: +
VAR: y
ADD: +
VAR: y
DIV: /
LITINT: 4
ADD: +
VAR: c
DIV: /
LITINT: 4
MINUS: -
LITINT: 2
MULT: *
VAR: c
ADD: +
LITINT: 7
SEMICOLON: ;
VAR: weekday
ASSIGN: :=
VAR: temp
MINUS: -
VAR: temp
DIV: /
LITINT: 7
MULT: *
LITINT: 7
SEMICOLON: ;
COMMENT: # This "if" is necessary to make sure weekday is positive
COMMENT: # because we did a remainder instead of a true modulus.
RWIF: if
LPAREN: (
VAR: weekday
LESS: <
LITINT: 0
RPAREN: )
SEMICOLON: ;
VAR: weekday
ASSIGN: :=
VAR: weekday
ADD: +
LITINT: 7
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
COMMENT: # Adjust to wrap Saturday to day #6
RWIF: if
LPAREN: (
VAR: weekday
EQUAL: =
LITINT: 0
RPAREN: )
SEMICOLON: ;
VAR: weekday
ASSIGN: :=
LITINT: 6
SEMICOLON: ;
RWELSE: else
SEMICOLON: ;
VAR: weekday
ASSIGN: :=
VAR: weekday
MINUS: -
LITINT: 1
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
COMMENT: # Display the title.
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 1
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "    January "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 2
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "   February "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 3
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "     March "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 4
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "     April "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 5
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "      May "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 6
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "     June "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 7
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "     July "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 8
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "     August "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 9
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "   September "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 10
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "    October "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 11
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "   November "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: month
EQUAL: =
LITINT: 12
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "   December "
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWPRINT: print
VAR: displayYear
COMMA: ,
CARRETURN: !
SEMICOLON: ;
COMMENT: # Display column headings.
RWPRINT: print
CHARSTRING: "Su Mo Tu We Th Fr Sa"
COMMA: ,
CARRETURN: !
SEMICOLON: ;
COMMENT: # Display the calendar.
VAR: count
ASSIGN: :=
LITINT: 0
SEMICOLON: ;
RWCOUNTING: counting
VAR: i
RWUPWARD: upward
LITINT: 1
MINUS: -
VAR: weekday
RWTO: to
VAR: monthSize
LBRACK: [
VAR: month
RBRACK: ]
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: i
LESSEQU: <=
LITINT: 0
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: "  "
SEMICOLON: ;
RWELSE: else
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: i
GREATER: >
EQUAL: =
LITINT: 1
AND: &
VAR: i
LESSEQU: <=
LITINT: 9
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CHARSTRING: " "
COMMA: ,
VAR: i
SEMICOLON: ;
RWELSE: else
SEMICOLON: ;
RWPRINT: print
VAR: i
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
VAR: count
ASSIGN: :=
VAR: count
ADD: +
LITINT: 1
SEMICOLON: ;
VAR: count
ASSIGN: :=
VAR: count
MINUS: -
VAR: count
DIV: /
LITINT: 7
MULT: *
LITINT: 7
SEMICOLON: ;
RWPRINT: print
CHARSTRING: " "
SEMICOLON: ;
RWIF: if
LPAREN: (
VAR: count
EQUAL: =
LITINT: 0
AND: &
VAR: i
LESS: <
VAR: monthSize
LBRACK: [
VAR: month
RBRACK: ]
RPAREN: )
SEMICOLON: ;
RWPRINT: print
CARRETURN: !
SEMICOLON: ;
RWEND: end
RWIF: if
SEMICOLON: ;
RWEND: end
RWCOUNTING: counting
SEMICOLON: ;
RWPRINT: print
CARRETURN: !
COMMA: ,
CARRETURN: !
SEMICOLON: ;
RWEXIT: exit
SEMICOLON: ;
RWEND: end
RWMAIN: main
SEMICOLON: ;
